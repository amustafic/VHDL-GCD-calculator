/-- The following entity is the top-level entity for lab 3. No changes are
-- required, but you need to map the I/O to the appropriate pins on the DE0
-- board.

-- I/O Explanation (assumes the switches are on side of the
--                  DE0 board that is closest to you)
-- switch(9) is the leftmost switch
-- button(2) is the leftmost button
-- led3 is the leftmost 7-segment LED
-- ledx_dp is the decimal point on the 7-segment LED for LED x

-- Note: this code will cause a harmless synthesis warning because not all
-- the buttons are used and because some output pins are always '0' or '1'

library ieee;
use ieee.std_logic_1164.all;

entity top_level is
    port (
	     clk : in std_logic;
        switch  : in  std_logic_vector(9 downto 0);
        button  : in  std_logic_vector(2 downto 0);
        led0    : out std_logic_vector(6 downto 0);
        led0_dp : out std_logic;
        led1    : out std_logic_vector(6 downto 0);
        led1_dp : out std_logic;
        led2    : out std_logic_vector(6 downto 0);
        led2_dp : out std_logic;
        led3    : out std_logic_vector(6 downto 0);
        led3_dp : out std_logic);
end top_level;

architecture STR of top_level is

    component decoder7seg
        port (
            input  : in  std_logic_vector(3 downto 0);
            output : out std_logic_vector(6 downto 0));
    end component;

    component GCD
        generic (
            WIDTH : positive := 8);
            port (
            clk    : in  std_logic;
            rst    : in  std_logic;
          x      : in  std_logic_vector(7 downto 0);
           y      : in  std_logic_vector(7 downto 0); 
			 go     : in  std_logic;
           done   : out std_logic;
          
           output : out std_logic_vector(7 downto 0)
           );
    end component;

     
          SIGNAL rst    :   std_logic;
          SIGNAL go     :   std_logic;
          SIGNAL done   :   std_logic;
          SIGNAL x      :   std_logic_vector(7 downto 0);
          SIGNAL y      :   std_logic_vector(7 downto 0);
          SIGNAL output :   std_logic_vector(7 downto 0);

    constant C0 : std_logic_vector(3 downto 0) := "0000";
    
begin  -- STR

    -- map adder output to two leftmost LEDs
    U_LED3 : decoder7seg port map (
        input  => output(7 downto 4),
        output => led3);

    U_LED2 : decoder7seg port map (
        input  => output(3 downto 0),
        output => led2);

    -- all other LEDs should display 0
    U_LED1 : decoder7seg port map (
        input  => C0,
        output => led1);

    U_LED0 : decoder7seg port map (
        input  => C0,
        output => led0);

    -- Because there are only 10 switches on the board, this code concatenates
    -- 3 zeros to the switch inputs to make the adder inputs eight bits each
    -- An alternative would be to use a 5-bit adder, but one of the
    -- architectures only supports eight bits.
    x <= "000" & switch(9 downto 5);
    y <= "000" & switch(4 downto 0);

    -- instantiate GCD
    U_GCD : entity work.gcd(FSMD)
        generic map (
            WIDTH => 8)
        port map (
            clk    => clk,
            rst    => not rst,
            go     => not button(0),          -- go mapped to rightmost button
            done   => done,
            x      => x,
            y      => y,
            output => output
        );

    -- show carry out on dp of leftmost LED
    -- should never be asserted due to 5-bit inputs
    led3_dp <= not done;

    -- show 6th sum bit (actual carry out) on led2 dp
    led2_dp <= '1';
    led1_dp <= '1';
    led0_dp <= '1';
    
    

end STR;





