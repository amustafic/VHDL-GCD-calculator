library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity gcd is
    generic (
        WIDTH : positive := 8);
    port (
        clk    : in  std_logic;
        rst    : in  std_logic;
        go     : in  std_logic;
        done   : out std_logic;
        x      : in  std_logic_vector(WIDTH-1 downto 0);
        y      : in  std_logic_vector(WIDTH-1 downto 0);
        output : out std_logic_vector(WIDTH-1 downto 0));
end gcd;

architecture FSMD of gcd is

	type STATE_TYPE is (START, S_INIT, S_LOOP, S_LESS, S_NEQUAL, S_DONE); 
	signal state : STATE_TYPE; 
	signal tempx : std_logic_vector(WIDTH-1 downto 0);
	signal tempy : std_logic_vector(WIDTH-1 downto 0);
	
begin  -- FSMD
process (clk, rst) 
begin 
	if (rst = '1') then 
		state  <= START;
      done   <= '0';
      output <= (others => '0');
      tempy <= (others => '0');
      tempx <= (others => '0');
		
	elsif (clk = '1' and clk'event) then 
		
		case state is 
			when START => 
			
				done <= '0'; 
				
				if (go = '0') then 
					state <= START; 
				else 
					state <= S_INIT; 
				end if; 
		
			when S_INIT => 
				done <= '0'; 
				tempx <= x; 
				tempy <= y; 
				state <= S_LOOP; 
				
			when S_LOOP => 
				
				done <= '0'; 
				
				if (tempx /= tempy) then 
					if (tempx < tempy) then 
	
						state <= S_LESS;  
						
					else 
					
						state <= S_NEQUAL; 
						 	
					end if;  
					
				else 
				 
					state <= S_DONE; 
					
				end if; 
				
			when S_LESS =>
			
				tempy <= std_logic_vector(unsigned(tempy) - unsigned(tempx)); 
				state <= S_LOOP; 
				
			when S_NEQUAL => 
				
				tempx <= std_logic_vector(unsigned(tempx) - unsigned(tempy)); 
				state <= S_LOOP; 
				
			when S_DONE => 
				
				output <= tempx;
				done <= '1'; 
				
				if (go = '1') then 
				
					state <= S_DONE; 
					
				else 
				
					state <= START; 
					
				end if; 
			end case; 
		end if; 
end process;
end FSMD;

architecture FSM_D1 of gcd is

	signal sel_x 	  : std_logic; 
	signal sel_y 	  : std_logic; 
	signal en_x      : std_logic; 
	signal en_y      : std_logic; 
	signal en_output : std_logic; 
	signal less      : std_logic; 
	signal nequal    : std_logic; 
	
	
begin  -- FSM_D1

	U_CTRL1 : entity work.ctrl1 
		port map( 
			clk 		=> clk, 
			rst 		=> rst,
			go       => go, 
			done		=> done, 
			x_lt_y 	=> less, 
			x_ne_y 	=> nequal, 
			x_sel 	=> sel_x,
			y_sel 	=> sel_y, 
			x_en 		=> en_x, 
			y_en 		=> en_y, 
			output_en => en_output); 

	U_DATAPATH : entity work.datapath1 
		port map( 
			clk 		=> clk, 
			rst 		=> rst, 
			x 			=> x,
			y 			=> y,
			output 	=> output, 
			x_sel 	=> sel_x,
			y_sel 	=> sel_y,
			x_en 		=> en_x,
			y_en 		=> en_y, 
			output_en => en_output, 
			x_lt_y 	=> less, 
			x_ne_y 	=> nequal); 
			
end FSM_D1;

architecture FSM_D2 of gcd is

	signal sel_x 	  : std_logic; 
	signal sel_y 	  : std_logic; 
	signal en_x      : std_logic; 
	signal en_y      : std_logic; 
	signal en_output : std_logic; 
	signal less      : std_logic; 
	signal nequal    : std_logic; 
	signal mux_selx  : std_logic; 
	signal mux_sely  : std_Logic; 
	
	
begin  -- FSM_D2

	U_CTRL2 : entity work.ctrl2 
		port map( 
			clk 		=> clk, 
			rst 		=> rst,
			go       => go, 
			done		=> done, 
			x_lt_y 	=> less, 
			x_ne_y 	=> nequal,
			mux_selx => mux_selx,
			mux_sely => mux_sely, 
			x_sel 	=> sel_x,
			y_sel 	=> sel_y, 
			x_en 		=> en_x, 
			y_en 		=> en_y, 
			output_en => en_output); 

	U_DATAPATH : entity work.datapath2 
		port map( 
			clk 		=> clk, 
			rst 		=> rst, 
			x 			=> x,
			y 			=> y,
			output 	=> output, 
			mux_selx	=> mux_selx, 
			mux_sely	=> mux_sely, 
			x_sel 	=> sel_x,
			y_sel 	=> sel_y,
			x_en 		=> en_x,
			y_en 		=> en_y, 
			output_en => en_output, 
			x_lt_y 	=> less, 
			x_ne_y 	=> nequal); 


end FSM_D2;